/// Use the AWS::DMS::EventSubscription resource to get notifications for AWS Database Migration Service       events through the Amazon Simple Notification Service. For more information, see       Working with events and notifications in         AWS Database Migration Service in the AWS Database Migration Service User Guide.
#[derive(Clone, Debug, Default, serde::Serialize, serde::Deserialize)]
#[serde(default)]
pub struct CfnEventSubscription {
    ///
    /// Indicates whether to activate the subscription. If you don't specify this property,       AWS CloudFormation activates the subscription.
    ///
    /// Required: No
    ///
    /// Type: Boolean
    ///
    /// Update requires: No interruption
    #[serde(rename = "Enabled")]
    #[serde(skip_serializing_if = "cfn_resources::wants_serialization")]
    pub enabled: Option<bool>,

    ///
    /// A list of event categories for a source type that you want to subscribe to. If you       don't specify this property, you are notified about all event categories. For more information, see               Working with Events and Notifications       in the AWS DMS User Guide.
    ///
    /// Required: No
    ///
    /// Type: List of String
    ///
    /// Update requires: No interruption
    #[serde(rename = "EventCategories")]
    #[serde(skip_serializing_if = "cfn_resources::wants_serialization")]
    pub event_categories: Option<Vec<String>>,

    ///
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic created for event notification.       The ARN is created by Amazon SNS when you create a topic and subscribe to it.
    ///
    /// Required: Yes
    ///
    /// Type: String
    ///
    /// Update requires: No interruption
    #[serde(rename = "SnsTopicArn")]
    pub sns_topic_arn: cfn_resources::StrVal,

    ///
    /// A list of identifiers for which AWS DMS provides notification events.
    ///
    /// If you don't specify a value, notifications are provided for all sources.
    ///
    /// If you specify multiple values, they must be of the same type. For example, if you       specify a database instance ID, then all of the other values must be database instance       IDs.
    ///
    /// Required: No
    ///
    /// Type: List of String
    ///
    /// Update requires: Replacement
    #[serde(rename = "SourceIds")]
    #[serde(skip_serializing_if = "cfn_resources::wants_serialization")]
    pub source_ids: Option<Vec<String>>,

    ///
    /// The type of AWS DMS resource that generates the events. For example, if you want to be       notified of events generated by a replication instance, you set this parameter to       replication-instance. If this value isn't specified, all events are returned.
    ///
    /// Valid values: replication-instance | replication-task
    ///
    /// Required: No
    ///
    /// Type: String
    ///
    /// Update requires: No interruption
    #[serde(rename = "SourceType")]
    #[serde(skip_serializing_if = "cfn_resources::wants_serialization")]
    pub source_type: Option<cfn_resources::StrVal>,

    ///
    /// The name of the AWS DMS event notification subscription. This name must be less than 255 characters.
    ///
    /// Required: No
    ///
    /// Type: String
    ///
    /// Update requires: Replacement
    #[serde(rename = "SubscriptionName")]
    #[serde(skip_serializing_if = "cfn_resources::wants_serialization")]
    pub subscription_name: Option<cfn_resources::StrVal>,

    ///
    /// One or more tags to be assigned to the event subscription.
    ///
    /// Required: No
    ///
    /// Type: List of Tag
    ///
    /// Update requires: No interruption
    #[serde(rename = "Tags")]
    #[serde(skip_serializing_if = "cfn_resources::wants_serialization")]
    pub tags: Option<Vec<Tag>>,
}

impl cfn_resources::CfnResource for CfnEventSubscription {
    fn type_string(&self) -> &'static str {
        "AWS::DMS::EventSubscription"
    }

    fn properties(&self) -> serde_json::Value {
        serde_json::to_value(self).expect("Failed to serialize to value")
    }

    fn validate(&self) -> Result<(), String> {
        Ok(())
    }
}

/// You can use the Resource Tags property to apply tags to resources, which can help you    identify and categorize those resources. You can tag only resources for which AWS CloudFormation supports    tagging. For information about which resources you can tag with CloudFormation, see the individual    resources in AWS resource and property types reference.
///
/// In addition to any tags you define, CloudFormation automatically creates the following    stack-level tags with the prefix aws::
///
/// The aws: prefix is reserved for AWS use. This prefix is case-insensitive. If    you use this prefix in the Key or Value property, you can't update    or delete the tag. Tags with this prefix don't count toward the number of tags per    resource.
///
/// Propagation of stack-level tags to resources, including automatically created tags, can vary by resource. For example, tags aren't propagated to Amazon EBS volumes that are created from block device mappings.
#[derive(Clone, Debug, Default, serde::Serialize, serde::Deserialize)]
#[serde(default)]
pub struct Tag {
    ///
    /// The key name of the tag. You can specify a value that's 1 to 128 Unicode          characters in length and can't be prefixed with aws:. You can use any          of the following characters: the set of Unicode letters, digits, whitespace,           _, ., /, =, +,          and -.
    ///
    /// Required: Yes
    ///
    /// Type: String
    ///
    #[serde(rename = "Key")]
    pub key: cfn_resources::StrVal,

    ///
    /// The value for the tag. You can specify a value that's 1 to 256 characters in          length.
    ///
    /// Required: Yes
    ///
    /// Type: String
    ///
    #[serde(rename = "Value")]
    pub value: cfn_resources::StrVal,
}

impl cfn_resources::CfnResource for Tag {
    fn type_string(&self) -> &'static str {
        "NOT_A_VALID_CFN_RESOURCE"
    }

    fn properties(&self) -> serde_json::Value {
        serde_json::to_value(self).expect("Failed to serialize to value")
    }

    fn validate(&self) -> Result<(), String> {
        Ok(())
    }
}
