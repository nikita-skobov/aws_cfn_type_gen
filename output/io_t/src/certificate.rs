/// Use the AWS::IoT::Certificate resource to declare an AWS IoT X.509     certificate. For information about working with X.509 certificates, see X.509 Client       Certificates in the AWS IoT Developer Guide.
#[derive(Clone, Debug, Default, serde::Serialize)]
pub struct CfnCertificate {
    ///
    /// The CA certificate used to sign the device certificate being registered, not available when CertificateMode is SNI_ONLY.
    ///
    /// Required: No
    ///
    /// Type: String
    ///
    /// Update requires: Replacement
    #[serde(rename = "CACertificatePem")]
    pub cacertificate_pem: Option<String>,

    ///
    /// Specifies which mode of certificate registration to use with this resource. Valid options are DEFAULT with CaCertificatePem and CertificatePem, SNI_ONLY with CertificatePem, and Default with CertificateSigningRequest.
    ///
    /// DEFAULT: A certificate in DEFAULT mode is either generated by AWS IoT Core or registered with an issuer certificate authority (CA).       Devices with certificates in DEFAULT mode aren't required to send the Server Name Indication (SNI) extension when connecting to AWS IoT Core.       However, to use features such as custom domains and VPC endpoints, we recommend that you use the SNI extension when connecting to AWS IoT Core.
    ///
    /// SNI_ONLY: A certificate in SNI_ONLY mode is registered without an issuer CA.       Devices with certificates in SNI_ONLY mode must send the SNI extension when connecting to AWS IoT Core.
    ///
    /// Required: No
    ///
    /// Type: String
    ///
    /// Update requires: Replacement
    #[serde(rename = "CertificateMode")]
    pub certificate_mode: Option<String>,

    ///
    /// The certificate data in PEM format. Requires SNI_ONLY for the certificate mode or the accompanying CACertificatePem for registration.
    ///
    /// Required: No
    ///
    /// Type: String
    ///
    /// Update requires: Replacement
    #[serde(rename = "CertificatePem")]
    pub certificate_pem: Option<String>,

    ///
    /// The certificate signing request (CSR).
    ///
    /// Required: No
    ///
    /// Type: String
    ///
    /// Update requires: Replacement
    #[serde(rename = "CertificateSigningRequest")]
    pub certificate_signing_request: Option<String>,

    ///
    /// The status of the certificate.
    ///
    /// Valid values are ACTIVE, INACTIVE, REVOKED, PENDING_TRANSFER, and     PENDING_ACTIVATION.
    ///
    /// The status value REGISTER_INACTIVE is deprecated and should not be used.
    ///
    /// Required: Yes
    ///
    /// Type: String
    ///
    /// Update requires: No interruption
    #[serde(rename = "Status")]
    pub status: String,
}

impl cfn_resources::CfnResource for CfnCertificate {
    fn type_string(&self) -> &'static str {
        "AWS::IoT::Certificate"
    }

    fn properties(&self) -> serde_json::Value {
        serde_json::to_value(self).expect("Failed to serialize cloudformation resource properties")
    }

    fn validate(&self) -> Result<(), String> {
        Ok(())
    }
}
